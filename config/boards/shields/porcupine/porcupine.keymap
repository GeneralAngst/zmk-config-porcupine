
/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

  /************************
  * Mac Version
  *
  * Porcupine - ZMK Keymap
  *
  ************************/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

/* Helper Macros, based on https://github.com/urob/zmk-helpers/ */

#pragma once

#define ZMK_HELPER_STRINGIFY(x) #x

// Preprocessor mechanism to overload macros, cf. https://stackoverflow.com/a/27051616/6114651
#define VARGS_(_10, _9, _8, _7, _6, _5, _4, _3, _2, _1, N, ...) N
#define VARGS(...) VARGS_(__VA_ARGS__, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0)
#define CONCAT_(a, b) a##b
#define CONCAT(a, b) CONCAT_(a, b)

//#define ZMK_BEHAVIOR_CORE_tap_dance  \
//    compatible = "zmk,behavior-tap-dance"; \
//    #binding-cells = <0>
//
//#define ZMK_BEHAVIOR(name, type, ...) \
//    name: name { \
//        ZMK_BEHAVIOR_CORE_ ## type; \
//        __VA_ARGS__ \
//    };
//
//#define ZMK_TAP_DANCE(name, ...) \
//    ZMK_BEHAVIOR(name, tap_dance, __VA_ARGS__)
//
//#define ZMK_TD_LAYER(name, layer) \
//    ZMK_TAP_DANCE(name, \
//        tapping-term-ms = <200>; \
//        bindings = <&mo layer>, <&to layer>; \
//)

#define QWERTY 0
#define GANGST 1
#define FUNC 2
#define NUM 3
#define NAV 4
#define SYSTEM 5

/* System behavior and Macros */
/// {
//    behaviors {
//        // hold: momentary layer | dbl-tap: to layer
//        ZMK_TD_LAYER(lower, LOWER)
//    };
//};

/* Blue-tooth controls */
/ {
    #ifdef BT_DISC_CMD
        // blue-tooth toggle
        behaviors {
            bt_0: bt_0 {
                compatible = "zmk,behavior-tap-dance";
                label = "BT_0";
                #binding-cells = <0>;
                tapping-term-ms = <200>;
                bindings = <&bt_select_0>, <&bt BT_DISC 0>;
            };
            bt_1: bt_1 {
                compatible = "zmk,behavior-tap-dance";
                label = "BT_1";
                #binding-cells = <0>;
                tapping-term-ms = <200>;
                bindings = <&bt_select_1>, <&bt BT_DISC 1>;
            };
            bt_2: bt_2 {
                compatible = "zmk,behavior-tap-dance";
                label = "BT_2";
                #binding-cells = <0>;
                tapping-term-ms = <200>;
                bindings = <&bt_select_2>, <&bt BT_DISC 2>;
            };
            bt_3: bt_3 {
                compatible = "zmk,behavior-tap-dance";
                label = "BT_3";
                #binding-cells = <0>;
                tapping-term-ms = <200>;
                bindings = <&bt_select_3>, <&bt BT_DISC 3>;
            };
        };
        macros {
            bt_select_0: bt_select_0 {
                label = "BT_SELECT_0";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                    = <&out OUT_BLE>,
                      <&bt BT_SEL 0>;
            };
            bt_select_1: bt_select_1 {
                label = "BT_SELECT_1";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                    = <&out OUT_BLE>,
                      <&bt BT_SEL 1>;
            };
            bt_select_2: bt_select_2 {
                label = "BT_SELECT_2";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                    = <&out OUT_BLE>,
                      <&bt BT_SEL 2>;
            };
            bt_select_3: bt_select_3 {
                label = "BT_SELECT_3";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                    = <&out OUT_BLE>,
                      <&bt BT_SEL 3>;
            };
        };
    #else
        // simple set blue-tooth
        macros {
            bt_0: bt_0 {
                label = "BT_0";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                    = <&out OUT_BLE>,
                      <&bt BT_SEL 0>;
            };
            bt_1: bt_1 {
                label = "BT_1";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                    = <&out OUT_BLE>,
                      <&bt BT_SEL 1>;
            };
            bt_2: bt_2 {
                label = "BT_2";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                    = <&out OUT_BLE>,
                      <&bt BT_SEL 2>;
            };
            bt_3: bt_3 {
                label = "BT_3";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                    = <&out OUT_BLE>,
                      <&bt BT_SEL 3>;
            };
        };
    #endif
};

/* Custom Defined Behaviors */
/ {
    // *************
    // OS specific values to use.
    //
    // - https://en.wikipedia.org/wiki/Table_of_keyboard_shortcuts
    // *************

    //mac
    #define LOCK       LG(LC(Q))
    #define HOME       LG(LEFT)
    #define END        LG(RIGHT)
    #define FWD        LG(RIGHT)
    #define BACK       LG(LEFT)
    #define UNDO       LG(Z)
    #define REDO       LG(LS(Z))
    #define CUT        LG(X)
    #define COPY       LG(C)
    #define PASTE      LG(V)
    #define FIND       LG(F)
    #define FIND_NEXT  LG(G)
    #define FIND_PREV  LG(LS(G))
    #define PRNT_SCRN  LG(LS(N4))

    // *************
    // key positions
    // *************

    //left

    //top
    #define KEY_LH_TP 0
    #define KEY_LH_TR 1
    #define KEY_LH_TM 2
    #define KEY_LH_TI 3
    #define KEY_LH_TX 4

    //mid
    #define KEY_LH_MP 10
    #define KEY_LH_MR 11
    #define KEY_LH_MM 12
    #define KEY_LH_MI 13
    #define KEY_LH_MX 14

    //bot
    #define KEY_LH_BP 20
    #define KEY_LH_BR 21
    #define KEY_LH_BM 22
    #define KEY_LH_BI 23
    #define KEY_LH_BX 24

    //thumb cluster (inner, left, home, right)
    #define KEY_LH_THI 30
    #define KEY_LH_THL 31
    #define KEY_LH_THH 32
    #define KEY_LH_THR 33

    //right

    //top
    #define KEY_RH_TX 5
    #define KEY_RH_TI 6
    #define KEY_RH_TM 7
    #define KEY_RH_TR 8
    #define KEY_RH_TP 9

    //mid
    #define KEY_RH_MX 15
    #define KEY_RH_MI 16
    #define KEY_RH_MM 17
    #define KEY_RH_MR 18
    #define KEY_RH_MP 19

    //bot
    #define KEY_RH_BX 25
    #define KEY_RH_BI 26
    #define KEY_RH_BM 27
    #define KEY_RH_BR 28
    #define KEY_RH_BP 29

    //thumb cluster (left, home, right, inner)
    #define KEY_RH_THL 34
    #define KEY_RH_THH 35
    #define KEY_RH_THR 36
    #define KEY_RH_THI 37

    behaviors {
        #define TAPPING_TERM_MS 280
        #define QUICK_TAP_MS 175
        #define PRIOR_IDLE_MS 150
        #define SELECT_WORD_DELAY 1

        // custom caps_word
        kaps_word: kaps_word {
            compatible = "zmk,behavior-caps-word";
            #binding-cells = <0>;
            continue-list = <
                UNDERSCORE MINUS
                BACKSPACE DELETE
                N1 N2 N3 N4 N5 N6 N7 N8 N9 N0
                KP_N1 KP_N2 KP_N3 KP_N4 KP_N5 KP_N6 KP_N7 KP_N8 KP_N9 KP_N0
            >;
        };

        // sticky-key config
        skq: sticky_key_quick_release {
            compatible = "zmk,behavior-sticky-key";
            #binding-cells = <1>;
            bindings = <&kp>;
            release-after-ms = <2000>;
            quick-release;
            ignore-modifiers;
        };

        // *************
        // Home Row Mods
        // *************

        #define LEFT_KEYS                                \
              0  1  2  3  4                              \
             10 11 12 13 14                              \
             20 21 22 23 24
        #define                             RIGHT_KEYS   \
                                           5  6  7  8  9 \
                                          15 16 17 18 19 \
                                          25 26 27 28 29
        #define THUMB_KEYS                               \
                      30 31 32 33   34 35 36 37

        hrm_left: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT";
            flavor = "balanced";
            tapping-term-ms = <TAPPING_TERM_MS>;
            quick_tap_ms = <QUICK_TAP_MS>;
            require-prior-idle-ms = <PRIOR_IDLE_MS>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <RIGHT_KEYS THUMB_KEYS>;
            hold-trigger-on-release;
        };

        hrm_right: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT";
            flavor = "balanced";
            tapping-term-ms = <TAPPING_TERM_MS>;
            quick_tap_ms = <QUICK_TAP_MS>;
            require-prior-idle-ms = <PRIOR_IDLE_MS>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <LEFT_KEYS THUMB_KEYS>;
            hold-trigger-on-release;
        };

        // *************
        // Custom shift keys
        // *************

        // tap: comma | shift + tap: semicolon
        shift_comma_semi: shift_comma_semi {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMI>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        // tap: dot | shift + tap: colon
        shift_dot_colon: shift_dot_colon {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp COLON>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        // tap: qmark | shift + tap: excl
        shift_qmark_excl: shift_qmark_excl {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp QMARK>, <&kp EXCL>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        // tap: lparen | shift + tap: rparen
        shift_parens: shift_parens {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LPAR>, <&kp RPAR>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        // tap: less_than | shift + tap: greater_than
        shift_angle: shift_angle {
                compatible = "zmk,behavior-mod-morph";
                #binding-cells = <0>;
                bindings = <&kp LESS_THAN>, <&kp GREATER_THAN>;
                mods = <(MOD_LSFT|MOD_RSFT)>;
            };

        // tap: lbracket | shift + tap: rbracket
        shift_brackets: shift_brackets {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LBKT>, <&kp RBKT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        // tap: lbrace | shift + tap: rbrace
        shift_braces: shift_braces {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LBRC>, <&kp RBRC>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        // tap: sticky-shift | shift + tap/double-tap: caps-word | hold: shift
        smart_shift: smart_shift {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&skq LSHFT>, <&kaps_word>;
            mods = <(MOD_LSFT)>;
        };

        // tap: dot | shift + tap: extend_line_right
        shift_dot: shift_dot {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp KP_DOT>, <&extend_line_right>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        // tap: 4 | shift + tap: left
        shift_four: shift_four {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp KP_N4>, <&kp LEFT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        // tap: 5 | shift + tap: down
        shift_five: shift_five {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp KP_N5>, <&kp DOWN>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        // tap: 6 | shift + tap: right
        shift_six: shift_six {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp KP_N6>, <&kp RIGHT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        // tap: 8 | shift + tap: up
        shift_eight: shift_eight {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp KP_N8>, <&kp UP>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        // *************
        // Custom layer tap
        // *************

        lt_thumb: layer_tap_thumb {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <QUICK_TAP_MS>;
            require-prior-idle-ms = <PRIOR_IDLE_MS>;
            bindings = <&mo>, <&kp>;
        };

        // tap: space | shift + tap: dot -> space -> sticky shift | hold: activate layer
        lt_space: lt_spc {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <QUICK_TAP_MS>;
            bindings = <&mo>, <&spc_morph>;
        };

        // tap: space | shift + tap: dot -> space -> sticky shift
        spc_morph: spc_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp SPACE>, <&dot_spc>;
        };

        //macro: dot -> space -> sticky shift
        dot_spc: dot_spc {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <5>;
            bindings = <&kp DOT &kp SPACE &skq LSHFT>;
        };

        // tap: selects word to right | shift + tab: selects word to left
        select_word: select_word {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&select_word_right>, <&select_word_left>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        ZMK_MACRO(select_word_right,
            wait-ms = <SELECT_WORD_DELAY>;
            tap-ms = <SELECT_WORD_DELAY>;
            bindings = <&kp LA(RIGHT) &kp LA(LEFT) &kp LA(LS(RIGHT))>;
        )
        ZMK_MACRO(select_word_left,
            wait-ms = <SELECT_WORD_DELAY>;
            tap-ms = <SELECT_WORD_DELAY>;
            bindings = <&kp LA(LEFT) &kp LA(RIGHT) &kp LA(LS(LEFT))>;
        )

        // tap: extends current selection one word right | shift + tap: extends current selection one word left
        extend_word: extend_word {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&extend_word_right>, <&extend_word_left>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        ZMK_MACRO(extend_word_right,
            wait-ms = <SELECT_WORD_DELAY>;
            tap-ms = <SELECT_WORD_DELAY>;
            bindings = <&kp LA(LS(RIGHT))>;
        )
        ZMK_MACRO(extend_word_left,
            wait-ms = <SELECT_WORD_DELAY>;
            tap-ms = <SELECT_WORD_DELAY>;
            bindings = <&kp LA(LS(LEFT))>;
        )

        // tap: selects current line to right | shift + tap: select current line to left
        select_line: select_line {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&select_line_right>, <&select_line_left>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        ZMK_MACRO(select_line_right,
            wait-ms = <SELECT_WORD_DELAY>;
            tap-ms = <SELECT_WORD_DELAY>;
            bindings = <&kp HOME &kp LS(END)>;
        )
        ZMK_MACRO(select_line_left,
            wait-ms = <SELECT_WORD_DELAY>;
            tap-ms = <SELECT_WORD_DELAY>;
            bindings = <&kp END &kp LS(HOME)>;
        )

        // tap: extends current selection one line right (down) | shift + tap: extends current selection one line left (up)
        extend_line: extend_line {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&extend_line_right>, <&extend_line_left>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        ZMK_MACRO(extend_line_right,
            wait-ms = <SELECT_WORD_DELAY>;
            tap-ms = <SELECT_WORD_DELAY>;
            bindings = <&kp LS(DOWN) &kp LS(END)>;
        )
        ZMK_MACRO(extend_line_left,
            wait-ms = <SELECT_WORD_DELAY>;
            tap-ms = <SELECT_WORD_DELAY>;
            bindings = <&kp LS(UP) &kp LS(HOME)>;
        )
    };

    combos {
        compatible = "zmk,combos";

        // COMBO_TIMEOUT defines how much time you have left (milliseconds)
        // after pressing the first key in a ZMK combo to finish the whole chord.
        //
        #ifndef COMBO_TIMEOUT
            #define COMBO_TIMEOUT 50
        #endif

        // *************
        // 30 key combos
        // *************

        // left combos
        // horizontal
        // top
        cmb_q {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <KEY_LH_TP KEY_LH_TR>;
            bindings = <&kp Q>;
            layers = <GANGST QWERTY>;
            require-prior-idle-ms = <PRIOR_IDLE_MS>;
        };
        cmb_angle {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <KEY_LH_TR KEY_LH_TM>;
            bindings = <&shift_angle>;
            layers = <GANGST QWERTY>;
            require-prior-idle-ms = <PRIOR_IDLE_MS>;
        };
        cmb_paren {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <KEY_LH_TM KEY_LH_TI>;
            bindings = <&shift_parens>;
            layers = <GANGST QWERTY>;
            require-prior-idle-ms = <PRIOR_IDLE_MS>;
        };

        // mid
        // bot
        cmb_z {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <KEY_LH_BP KEY_LH_BR>;
            bindings = <&kp Z>;
            layers = <GANGST QWERTY>;
            require-prior-idle-ms = <PRIOR_IDLE_MS>;
        };
        cmb_brace {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <KEY_LH_BR KEY_LH_BM>;
            bindings = <&shift_braces>;
            layers = <GANGST QWERTY>;
            require-prior-idle-ms = <PRIOR_IDLE_MS>;
        };
        cmb_bracket {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <KEY_LH_BM KEY_LH_BI>;
            bindings = <&shift_brackets>;
            layers = <GANGST QWERTY>;
            require-prior-idle-ms = <PRIOR_IDLE_MS>;
        };


        // vertical
        // index
        cmb_plus_x {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <KEY_LH_TI KEY_LH_MI>;
            bindings = <&kp PLUS>;
            layers = <GANGST QWERTY NUM>;
            require-prior-idle-ms = <PRIOR_IDLE_MS>;
        };
        cmb_minus_x {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <KEY_LH_MI KEY_LH_BI>;
            bindings = <&kp MINUS>;
            layers = <GANGST QWERTY NUM>;
            require-prior-idle-ms = <PRIOR_IDLE_MS>;
        };

        // middle
        cmb_star_x {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <KEY_LH_TM KEY_LH_MM>;
            bindings = <&kp STAR>;
            layers = <GANGST QWERTY NUM>;
            require-prior-idle-ms = <PRIOR_IDLE_MS>;
        };
        cmb_slash_x {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <KEY_LH_MM KEY_LH_BM>;
            bindings = <&kp SLASH>;
            layers = <GANGST QWERTY NUM>;
            require-prior-idle-ms = <PRIOR_IDLE_MS>;
        };

        // ring
        cmb_dollar_x {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <KEY_LH_TR KEY_LH_MR>;
            bindings = <&kp DOLLAR>;
            layers = <GANGST QWERTY NUM>;
            require-prior-idle-ms = <PRIOR_IDLE_MS>;
        };
        cmb_equal_x {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <KEY_LH_MR KEY_LH_BR>;
            bindings = <&kp EQUAL>;
            layers = <GANGST QWERTY NUM>;
            require-prior-idle-ms = <PRIOR_IDLE_MS>;
        };

        // pinky
        cmb_caret_x {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <KEY_LH_TP KEY_LH_MP>;
            bindings = <&kp CARET>;
            layers = <GANGST QWERTY NUM>;
            require-prior-idle-ms = <PRIOR_IDLE_MS>;
        };
        cmb_percent_x {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <KEY_LH_MP KEY_LH_BP>;
            bindings = <&kp PERCENT>;
            layers = <GANGST QWERTY NUM>;
            require-prior-idle-ms = <PRIOR_IDLE_MS>;
        };


        // right combos
        // horizontal
        // top
        // mid
        cmb_quote {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <KEY_RH_MR KEY_RH_MP>;
            bindings = <&kp SQT>;
            layers = <GANGST QWERTY>;
            require-prior-idle-ms = <PRIOR_IDLE_MS>;
        };

        // bot
        cmb_dot {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <KEY_RH_BI KEY_RH_BM>;
            bindings = <&shift_dot_colon>;
            layers = <GANGST QWERTY>;
            require-prior-idle-ms = <PRIOR_IDLE_MS>;
        };
        cmb_comma {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <KEY_RH_BM KEY_RH_BR>;
            bindings = <&shift_comma_semi>;
            layers = <GANGST QWERTY>;
            require-prior-idle-ms = <PRIOR_IDLE_MS>;
        };
        cmb_question {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <KEY_RH_BR KEY_RH_BP>;
            bindings = <&shift_qmark_excl>;
            layers = <GANGST QWERTY>;
            require-prior-idle-ms = <PRIOR_IDLE_MS>;
        };

        // vertical
        // index
        cmb_hash_x {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <KEY_RH_TI KEY_RH_MI>;
            bindings = <&kp HASH>;
            layers = <GANGST QWERTY>;
            require-prior-idle-ms = <PRIOR_IDLE_MS>;
        };
        cmb_under_x {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <KEY_RH_MI KEY_RH_BI>;
            bindings = <&kp UNDER>;
            layers = <GANGST QWERTY>;
            require-prior-idle-ms = <PRIOR_IDLE_MS>;
        };

        // middle
        cmb_at_x {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <KEY_RH_TM KEY_RH_MM>;
            bindings = <&kp AT>;
            layers = <GANGST QWERTY>;
            require-prior-idle-ms = <PRIOR_IDLE_MS>;
        };
        cmb_grave_x {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <KEY_RH_MM KEY_RH_BM>;
            bindings = <&kp GRAVE>;
            layers = <GANGST QWERTY>;
            require-prior-idle-ms = <PRIOR_IDLE_MS>;
        };

        // ring
        cmb_amps_x {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <KEY_RH_TR KEY_RH_MR>;
            bindings = <&kp AMPS>;
            layers = <GANGST QWERTY>;
            require-prior-idle-ms = <PRIOR_IDLE_MS>;
        };
        cmb_pipe_x {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <KEY_RH_MR KEY_RH_BR>;
            bindings = <&kp PIPE>;
            layers = <GANGST QWERTY>;
            require-prior-idle-ms = <PRIOR_IDLE_MS>;
        };

        // pinky
        cmb_tilde_x {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <KEY_RH_TP KEY_RH_MP>;
            bindings = <&kp TILDE>;
            layers = <GANGST QWERTY>;
            require-prior-idle-ms = <PRIOR_IDLE_MS>;
        };
        cmb_bslash_x {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <KEY_RH_MP KEY_RH_BP>;
            bindings = <&kp BACKSLASH>;
            layers = <GANGST QWERTY>;
            require-prior-idle-ms = <PRIOR_IDLE_MS>;
        };
    };
};

/ {
  keymap {
    compatible = "zmk,keymap";

    qwerty {
      bindings = <
        &kp Q             &kp W             &kp E             &kp R              &kp T                  &kp Y         &kp U                &kp I              &kp O              &kp P
        &hrm_left LCTL A  &hrm_left LALT S  &hrm_left LGUI D  &hrm_left LSFT F   &kp G                  &kp H         &hrm_right LSFT J    &hrm_right LGUI K  &hrm_right LALT L  &hrm_right LCTL SQT
        &kp Z             &kp X             &kp C             &kp V              &kp B                  &kp N         &kp M                &shift_comma_semi  &shift_dot_colon   &shift_qmark_excl
                          &kp ESC           &smart_shift      &lt_thumb NAV TAB  &mo SYSTEM             &mo SYSTEM    &lt_thumb FUNC BSPC  &lt_space NUM 0    &kp RET
      >;
    };

    gangst {
      bindings = <
        &kp P             &kp W             &kp G             &kp M              &none                  &none         &kp F                &kp K              &kp X              &kp J
        &hrm_left LCTL N  &hrm_left LALT S  &hrm_left LGUI R  &hrm_left LSFT T   &none                  &none         &hrm_right LSFT A    &hrm_right LGUI E  &hrm_right LALT I  &hrm_right LCTL H
        &kp V             &kp C             &kp L             &kp D              &none                  &none         &kp O                &kp U              &kp Y              &kp B
                          &kp ESC           &smart_shift      &lt_thumb NAV TAB  &mo SYSTEM             &mo SYSTEM    &lt_thumb FUNC BSPC  &lt_space NUM 0    &kp RET
      >;
    };

    func {
      bindings = <
        &kp F9            &kp F10           &kp F11           &kp F12            &none                  &none         &kp C_RW             &kp C_PP           &kp C_FF           &kp C_BRI_UP
        &kp F5            &kp F6            &kp F7            &kp F8             &none                  &none         &kp LSHFT            &kp LGUI           &kp LALT           &kp LCTRL
        &kp F1            &kp F2            &kp F3            &kp F4             &none                  &none         &kp C_MUTE           &kp C_VOL_DN       &kp C_VOL_UP       &kp C_BRI_DN
                          &trans            &trans            &kp TAB            &tog FUNC              &tog FUNC     &kp BSPC             &kp SPACE          &trans
      >;
    };

    num {
      bindings = <
        &kp KP_CLEAR      &kp KP_N7         &shift_eight      &kp KP_N9          &none                  &none         &none                &none              &none              &none
        &kp KP_N0         &shift_four       &shift_five       &shift_six         &none                  &none         &kp LSHFT            &kp LGUI           &kp LALT           &kp LCTRL
        &kp KP_DOT        &kp KP_N1         &kp KP_N2         &kp KP_N3          &none                  &none         &kp BSPC             &kp SPACE          &kp TAB            &kp RET
                          &trans            &trans            &kp TAB            &tog NUM               &tog NUM      &kp BSPC             &kp SPACE          &trans
      >;
    };

   nav {
      bindings = <
        &kp REDO          &none             &kp PRNT_SCRN     &kp FIND           &none                  &none         &kp HOME             &kp UP             &kp END            &kp PG_UP
        &kp LCTRL         &kp LALT          &kp LGUI          &kp LSHFT          &none                  &none         &kp LEFT             &kp DOWN           &kp RIGHT          &kp PG_DN
        &kp UNDO          &kp CUT           &kp COPY          &kp PASTE          &none                  &none         &select_word         &extend_word       &select_line       &extend_line
                          &trans            &trans            &kp TAB            &tog NAV               &tog NAV      &kp BSPC             &kp SPACE          &trans
      >;
    };

    system {
      bindings = <
        &none             &none             &none             &none              &bt BT_CLR_ALL         &out OUT_USB  &none                &none              &none              &none
        &bt_0             &bt_1             &bt_2             &bt_3              &bt BT_CLR             &none         &to QWERTY           &to GANGST         &none              &none
        &none             &none             &none             &none              &bootloader            &bootloader   &none                &none              &none              &none
                          &bt BT_CLR_ALL    &none             &tog NAV           &none                  &none         &tog FUNC            &tog NUM           &none
      >;
    };

//    template {
//          bindings = <
//            &none             &none             &none             &none              &mo SYSTEM      &mo SYSTEM               &none                &none              &none              &none
//            &none             &none             &none             &none              &none           &none                    &none                &none              &none              &none
//            &none             &none             &none             &none              &none           &none                    &none                &none              &none              &none
//                              &none             &none             &none              &none           &none                    &none                &none              &none
//          >;
//        };

  };
};